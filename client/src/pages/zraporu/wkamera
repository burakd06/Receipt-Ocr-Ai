import React, { useState, useRef, use } from "react";
import { useNavigate } from "react-router-dom";
import Cropper from "react-cropper";
import "cropperjs/dist/cropper.css";
import "./zraporu.css";
import axios from "axios";

const Zrapor = () => {
  const navigate = useNavigate();
  const [file, setFile] = useState(null);
  const [result, setResult] = useState({
    ZNo: [],
    Unvan: "",
    Adres: "",
    Tarih: [], // Tarihler dizisi
    Toplam: [],
    Topkdv: [],
  });
  const [rawText, setRawText] = useState(""); // Store the full OCR text
  const [isLoading, setIsLoading] = useState(false);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const cropperRef = useRef(null);

  const handleFileChange = (e) => {
    setFile(URL.createObjectURL(e.target.files[0]));  
  };

  const handleBackHome = () => {
    navigate("/");
  };

  const handleCropAndSubmit = async () => {
    if (!cropperRef.current) return;

    const croppedCanvas = cropperRef.current.cropper.getCroppedCanvas();
    const croppedImage = croppedCanvas.toDataURL("image/jpeg");

    setIsLoading(true);

    try {
      const formData = new FormData();
      formData.append("image", dataURLtoFile(croppedImage, "cropped-image.jpg"));

      const response = await axios.post("http://localhost:5000/ocr", formData, {
        headers: {
          "Content-Type": "multipart/form-data",
        },
      });

      const rawText = response.data.text; // Full OCR text
      setRawText(rawText); // Store the raw text

      setResult(parseResult(rawText)); // Parse and store the result
    } catch (error) {
      console.error("Hata:", error);
    } finally {
      setIsLoading(false);
    }
  };

  const dataURLtoFile = (dataurl, filename) => {
    const arr = dataurl.split(",");
    const mime = arr[0].match(/:(.*?);/)[1];
    const bstr = atob(arr[1]);
    let n = bstr.length;
    const u8arr = new Uint8Array(n);
    while (n--) {
      u8arr[n] = bstr.charCodeAt(n);
    }
    return new File([u8arr], filename, { type: mime });
  };

  const openModal = () => setIsModalOpen(true);
  const closeModal = () => setIsModalOpen(false);

  const parseResult = (text) => {
    const lines = text.split("\n");
    const data = {
      Unvan: "",
      Adres: "",
      VKN: "",
      TCKN: "",
      VergiDairesi: "",
      Tarih: [], // Tarihleri dizi olarak saklıyoruz
      ZNo: [],
      Toplam: [],
      Topkdv: [],
    };

    lines.forEach((line, index) => {
      // Skip lines with "*" in "TOPLAM" or "TOPKDV" titles
      if (line.match(/TOPLAM/i) && line.includes("*")) {
        return; // Skip this line if it contains an asterisk
      }
      if (line.match(/TOPLAMKDV/i) && line.includes("*")) {
        return; // Skip this line if it contains an asterisk
      }

      // Detect "Z No" (Z, Z NO, Z no, Z numarası, Z RAPOR)
      if (line.match(/^(Z|Z NO|Z no|Z numarası|Z RAPOR)/i)) {
        const zNoValue = line.split(":")[1]?.trim() || line.trim();
        data.ZNo.push(zNoValue); // Add each Z No to the array
      }

      // Match for "TOPLAM" and capture value from the next line
      if (line.match(/TOPLAM|TOP|ARATOPLAM/i)) {
        const nextLine = lines[index + 1] || ""; // Get the next line (if it exists)
        const nextLineValue = nextLine.trim();
        if (nextLineValue) {
          data.Toplam.push(nextLineValue); // Add corresponding TOPLAM value
        }
      }

      // Match for "TOPLAMKDV" and capture value from the next line only
      if (line.match(/TOPLAMKDV|KDV|kdv|TOPKDV|topkdv|topK/i)) {
        const nextLine = lines[index + 1] || ""; // Get the next line (if it exists)
        const nextLineValue = nextLine.trim();
        if (nextLineValue) {
          data.Topkdv.push(nextLineValue); // Add corresponding KDV value
        }
      }

      // Handle other fields parsing
      if (line.match(/SAN./i)) {
        data.Unvan = line.trim();
      } else if (line.match(/Adres|MH\.|CD/i)) {
        data.Adres += line.trim() + " ";
      } else if (line.match(/\b\d{10}\b/)) {
        data.VKN = line.match(/\b\d{10}\b/)[0];
      } else if (line.match(/\b\d{11}\b/)) {
        data.TCKN = line.match(/\b\d{11}\b/)[0];
      } else if (line.match(/Vergi Dairesi|VD|vd/i)) {
        const matchVergiDairesi = line.match(/(\S+)\s*(VD|vd)\.?/i);
        if (matchVergiDairesi) {
          data.VergiDairesi = matchVergiDairesi[1];
        }
      } else if (line.match(/\d{1,2}[\.\/\-]\d{1,2}[\.\/\-]\d{2,4}/)) {
        const foundDate = line.match(/\d{1,2}[\.\/\-]\d{1,2}[\.\/\-]\d{2,4}/)[0];
        if (foundDate) {
          data.Tarih.push(foundDate); // Add found date to the Tarih array
        }
      }
    });

    return data;
  };

  const handleInputChange = (key, value, index) => {
    const updatedData = { ...result };
    updatedData[key][index] = value;
    setResult(updatedData);
  };

  return (
    <div className="container">
      <div className="left-box">
        <h2>Gider Fişi</h2>
        <input type="file" onChange={handleFileChange} className="file-input" />

        {file && (
          <>
            <div className="cropped-preview">
              <h3>Kırpılmış Görüntü</h3>
              <Cropper
                src={file}
                style={{ height: 200, width: "100%" }}
                ref={cropperRef}
                guides={true}
              />
            </div>

            <div className="original-preview" onClick={openModal}>
              <h3>Orijinal Görüntü</h3>
              <img src={file} alt="original" />
            </div>
          </>
        )}

        <button onClick={handleCropAndSubmit} className={`scan-button ${isLoading ? "loading" : ""}`} disabled={isLoading}>
          {isLoading ? (
            <span className="loading-text">
              <span className="spinner"></span> Taranıyor...
            </span>
          ) : (
            "Taramayı Başlat"
          )}
        </button>
      </div>

      <div className="right-box">
        <h2>Tarama Sonuçları</h2>

        {/* Displaying Unvan, Adres and multiple Tarih entries */}
        <div className="result-info">
          <p><strong>Unvan:</strong> {result.Unvan}</p>
          <p><strong>Adres:</strong> {result.Adres}</p>
          <p><strong>Z no:</strong> {result.ZNo}</p>
          <p><strong>Toplam</strong> {result.Toplam}</p>
          <p><strong>KDV</strong> {result.Topkdv}</p>
          <div>
            <strong>Tarih:</strong>
            <ul>
              {result.Tarih.map((tarih, index) => (
                <li key={index}>{tarih}</li>
              ))}
            </ul>
          </div>
        </div>

        <div className="result-box">
          <table>
            <thead>
              <tr>
                <th>Z No Sıralama</th>
                <th>Z No</th>
                <th>Toplam</th>
                <th>KDV</th>
                <th>Tarih</th> {/* Add a new column for Tarih */}
              </tr>
            </thead>
            <tbody>
              {result.ZNo.map((zNo, index) => (
                <tr key={index}>
                  <td><strong>Z No {index + 1}</strong></td>
                  <td>
                    <input
                      type="text"
                      value={zNo}
                      onChange={(e) => handleInputChange("ZNo", e.target.value, index)}
                      className="result-input"
                    />
                  </td>
                  <td>
                    <input
                      type="text"
                      value={result.Toplam[index] || ""}
                      onChange={(e) => handleInputChange("Toplam", e.target.value, index)}
                      className="result-input"
                    />
                  </td>
                  <td>
                    <input
                      type="text"
                      value={result.Topkdv[index] || ""}
                      onChange={(e) => handleInputChange("Topkdv", e.target.value, index)}
                      className="result-input"
                    />
                  </td>
                  <td>
                    <input
                      type="text"
                      value={result.Tarih[index] || ""} 
                      onChange={(e) => handleInputChange("Tarih", e.target.value, index)}
                      className="result-input"
                    />
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        {/* Displaying the entire raw OCR text */}
        <div className="full-result">
          <h3>Full OCR Result</h3>
          <pre>{rawText}</pre>
        </div>
      </div>

      {isModalOpen && (
        <div className="modal" onClick={closeModal}>
          <img src={file} alt="fullscreen-original" />
        </div>
      )}
      <button id="zraporAnasayfa" onClick={handleBackHome}>ANA SAYFA</button>
    </div>
  
  );
};

export default Zrapor;
